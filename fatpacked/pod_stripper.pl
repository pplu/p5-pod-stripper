#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"Pod/Strip.pm"} = '#line '.(1+__LINE__).' "'.__FILE__."\"\n".<<'POD_STRIP';
  package Pod::Strip;
  
  use warnings;
  use strict;
  
  use base ('Pod::Simple');
  
  our $VERSION = "1.02";
  
  sub new {
      my $new = shift->SUPER::new(@_);
      $new->{_code_line}=0;
      $new->code_handler(
          sub {
              # Add optional line directives
              if ($_[2]->{_replace_with_comments}) {
                  if ($_[2]->{_code_line}+1<$_[1]) {
                      print {$_[2]{output_fh}} ("# stripped POD\n") x ($_[1] - $_[2]->{_code_line} -1 );
                  }
                  $_[2]->{_code_line}=$_[1];
              }
              print {$_[2]{output_fh}} $_[0],"\n";
              return;
         });
      return $new;
  }
  
  
  sub replace_with_comments {
      my $self = shift;
      $self->{_replace_with_comments} = defined $_[0] ? $_[0] : 1;
  }
  
  
  1;
  __END__
  
  =pod
  
  =head1 NAME
  
  Pod::Strip - Remove POD from Perl code
  
  =head1 SYNOPSIS
  
      use Pod::Strip;
  
      my $p=Pod::Strip->new;              # create parser
      my $podless;                        # set output string
      $p->output_string(\$podless);       # see Pod::Simple
      $p->parse_string_document($code);   # or some other parsing method
                                          #    from Pod::Simple
      # $podless will now contain code without any POD
  
  
  =head1 DESCRIPTION
  
  Pod::Strip is a subclass of Pod::Simple that strips all POD from Perl Code.
  
  =head1 METHODS
  
  All methods besides those listed here are inherited from Pod::Simple
  
  =head2 new
  
  Generate a new parser object.
  
  =head2 replace_with_comments
  
  Call this method with a true argument to replace POD with comments (looking like "# stripped POD") instead of stripping it.
  
  This has the effect that line numbers get reported correctly in error
  messages etc.
  
  =head1 AUTHOR
  
  Thomas Klausner, C<< <domm@cpan.org> >>
  
  =head1 BUGS
  
  Please report any bugs or feature requests to
  C<bug-pod-strip@rt.cpan.org>, or through the web interface at
  L<http://rt.cpan.org>.  I will be notified, and then you'll automatically
  be notified of progress on your bug as I make changes.
  
  =head1 COPYRIGHT & LICENSE
  
  Copyright 2004, 2005, 2006 Thomas Klausner, All Rights Reserved.
  
  This program is free software; you can redistribute it and/or modify it
  under the same terms as Perl itself.
  
  =cut
  
  
POD_STRIP

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


use v5.10;
use warnings;
use strict;
use File::Find ();
use Pod::Strip;
use autodie;

sub wanted;
sub dostrip;
sub delete_pod;

my $original_bytes = 0;
my $final_bytes = 0;

use Cwd ();
my $cwd = Cwd::cwd();

my @dirs;
if (@ARGV) {
  @dirs = @ARGV;
} else {
  @dirs = ('local/');
}

# Traverse desired filesystems
File::Find::find({wanted => \&wanted}, @dirs);

say "Original module size: $original_bytes";
say "Stripped to: $final_bytes";
say sprintf "Won %0.02f%%", (1- ($final_bytes / $original_bytes)) * 100;

exit;

sub wanted {
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size);

    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size) = lstat($_);
    $original_bytes += $size;

    if (-f $_ && /^.*\.pm\z/s) {
        dostrip($_);
    }

    if (-f _ && /^.*\.pod\z/s) {
        delete_pod($_);
    }

    $final_bytes += (-s $_ // 0);
}

sub delete_pod {
    my $file = shift;
    unlink $file;
}

sub dostrip {
    my $file = shift;

    my $strip = Pod::Strip->new;
    my $module;
    { local $/ = undef;
      open my $pm, '<', $file;
      $module = <$pm>;
      close $pm
    }

    # We unlink the original pm
    unlink $file;

    open my $pm, '>', $file;
    $strip->output_fh($pm);
    $strip->parse_string_document($module);
    close $pm;
}

